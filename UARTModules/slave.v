//  This code is generated by Terasic System Builder
//=======================================================

module slave(

    //////////// CLOCK //////////
    input                           CLOCK_50,
	 input 									clk,
    //output    reg     [17:0]        LEDR,

    //////////// KEY //////////
    //input              [3:0]        KEY,

    //////////// GPIO, GPIO connect to RFS - RF and Sensor //////////
    input                           BT_UART_RX,
    output                          BT_UART_TX,
    output wire                        saida,
	 input									uart_write,
	 output reg [7:0]						uart_out,
	 output reg [3:0]						count,
	 input [7:0]							uart_in
);




//=======================================================
//  REG/WIRE declarations
//=======================================================

assign  BT_UART_TX = txd;
assign  rxd  = BT_UART_RX;


wire                 rts; // request to send          
wire                 cts; // clear to send
wire                 rxd;
wire                 txd;
wire     [7:0]   uart_data;
wire             rdempty;
wire             write;
reg                read;
reg             cnt;

reg    [7:0]        write_test;

reg    [31:0]    counter;
//=======================================================
//  Structural coding
//=======================================================

botaoEstados BE (CLOCK_50, ~uart_write, one_shot);

// UART Controller
uart_control UART0(

    .clk(CLOCK_50),
    .reset_n(1'b1),
    // tx
    .write(~one_shot),
//		.write(uart_write),
//		.write(1'b0),
    .writedata(uart_in),

    // rx
    .read(read),
    .readdata(uart_data),
    .rdempty(rdempty),
    //
    .uart_clk_25m(cnt),
    .uart_tx(txd),
    .uart_rx(rxd)
    
);

expand_pulse ext(CLOCK_50, ~rdempty, saida);

always @(posedge write)
begin
	count <= count + 1;
end

always @(posedge clk)
begin
	if(uart_write)
		write_test = uart_in;
//		write_test = 7;
end

always@(posedge CLOCK_50)
begin
  if (~rdempty)
  begin
        counter <= counter + 1;
        read <= 1;
    end
  else
        read <= 0;
end
assign  write = ( read & (~rdempty) );

always@(posedge CLOCK_50)
begin
  if(write)
  begin
    uart_out <= uart_data;
  end
  else
    uart_out <= uart_out;
end

always@(posedge CLOCK_50)
    cnt <= cnt + 1;

endmodule